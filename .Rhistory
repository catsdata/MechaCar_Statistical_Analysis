> install.packages("tidyverse")
install.packages("tidyverse")
install.packages("jsonlite")
q()
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/cakem/Documents/SCHOOL/Module 15 - Statistics & R/R_Analysis/01_Demo")
x <- -3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?<name of function>
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
?<name of function>
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
#filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
View(filter_table2)
# subset function above is cleaner than if we defined in brackets
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
View(filter_table3)
# sample a large vector and create a smaller vector
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
# capture the number of rows in demo_table in a variable
num_rows <- 1:nrow(demo_table)
# sample 3 of those rows
sample_rows <- sample(num_rows, 3)
# retrieve the requested data within the demo_table
demo_table[sample_rows,]
# above three steps combined in one.
demo_table[sample(1:nrow(demo_table), 3),]
# load in to transform data
library(tidyverse)
?mutate()
# load in to transform data
library(tidyverse)
#add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
View(demo_table)
#create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
#create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
long_table
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
# to check if our newly created wide-format table is exactly the same as our original demo_table3, we can use R's all.equal() function
all.equal(demo_table3,wide_table)
table <-demo_table3[,order(colnames(wide_table))]
table <- demo_table3[,(colnames(wide_table))]
View(table)
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
# add formatting functions to our plotting statement #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
theme(axis.text.x=element_text(angle=45,hjust=1))
# add formatting functions to our plotting statement #plot bar plot with labels; #rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_point()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro.test()
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# sample of used car data
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
# sample of used car data
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
?t.test()
# compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
# compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# test null hypothesis; compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
# test null hypothesis; compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
# create paired datasets from csv
mpg_data <- read.csv('mpg_modified.csv')
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
# test null hypothesis; compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
# filter mtcars and #convert numeric column to factor
mtcars_filt <- mtcars[,c("hp","cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
# find p-values of anova test above
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point()
#calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
plt + geom_point()
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
View(used_matrix)
# create liner regression model
lm(qsec ~ hp,mtcars)
summary(lm(qsec~hp,mtcars))
#create linear model; #determine y-axis values from linear model
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
View(model)
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
#use mulitple line regression to clarify
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
#summarize stats
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
# Categorical analysis
#generate contingency table
table(mpg$class,mpg$year)
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl) #compare categorical distributions
set.seed(42)
population1 = rnorm(1000)
population2 = rnorm(1000)
t.test(population1, population2)
population1 = rnorm(1000)
population2 = rnorm(1000, -2)
t.test(population1, population2)
setwd("C:/Users/cakem/Documents/SCHOOL/Module 15 - Statistics & R/R_Analysis/MechaCar_Statistical_Analysis")
library(dplyr)
mecha_mpg <- read.csv(file='resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(mecha_mpg)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(qsec ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mecha_mpg)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mecha_mpg)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)
#summarize stats (look at Pr column)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg))
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
mecha_mpg <- read.csv(file='resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg))
# Import and read in the Suspension_Coil.csv file as a table.
mecha_mpg <- read.csv(file='resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
mecha_mpg <- read.csv(file='resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg))
# Deliverable 2 -----------------------------------------------------------
# Import and read in the Suspension_Coil.csv file as a table.
sus_coil <- read.csv(file='resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
View(sus_coil)
#create summary table
total_summary <- sus_coil %>% summarize(PSI), .groups = 'keep')
#create summary table
total_summary <- sus_coil %>% summarize(PSI)
View(total_summary)
#create summary table
total_summary <- sus_coil %>% group_by(PSI) %>% summarize(Mean=mean(odometer), .groups = 'keep')
#create summary table
total_summary <- sus_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI), .groups = 'keep')
View(total_summary)
#create summary table
total_summary <- sus_coil %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
#create summary table
total_summary <- sus_coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each
# manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(lot_summary)
# Import and read in the Suspension_Coil.csv file as a table.
sus_coil <- read.csv(file='resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the summarize() function to get the:
# mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- sus_coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each
# manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Deliverable 1 -----------------------------------------------------------
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
mecha_mpg <- read.csv(file='resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg))
# Deliverable 2 -----------------------------------------------------------
# Import and read in the Suspension_Coil.csv file as a table.
sus_coil <- read.csv(file='resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the summarize() function to get the:
# mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- sus_coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each
# manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
?t.test()
# write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different
# from the population mean of 1,500 pounds per square inch
t.test(sus_Coil$PSI, mu = 1500)
# write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different
# from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, mu = 1500)
t.test(sus_coil$PSI ~ 1, subset = sus_coil$Manufacturing_Lot == "Lot3",  mu = 1500)
# write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different
# from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, mu=1500)
# write three more RScripts in your MechaCarChallenge.RScript using the t.test() function and its subset() argument
# to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot == "Lot1",  mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot == "Lot2",  mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot == "Lot3",  mu=1500)
# from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, mu=1500)
# write three more RScripts in your MechaCarChallenge.RScript using the t.test() function and its subset() argument
# to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI ~ 1, subset=sus_coil$Manufacturing_Lot == "Lot1",  mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot == "Lot2",  mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot == "Lot3",  mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=="Lot1", mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=="Lot2", mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=="Lot3", mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=='Lot1', mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=='Lot2', mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=='Lot3', mu=1500)
# write three more RScripts in your MechaCarChallenge.RScript using the t.test() function and its subset() argument
# to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=='Lot1', mu=1500)
t.test(sus_coil$PSI, subset=sus_coil$Manufacturing_Lot=='Lot2', mu=1500)
t.test(sus_coil$PSI, subset(sus_coil$Manufacturing_Lot=='Lot1'), mu=1500)
t.test(sus_coil$PSI, subset(sus_coil$Manufacturing_Lot=='Lot2'), mu=1500)
t.test(sus_coil$PSI, subset(sus_coil$Manufacturing_Lot=='Lot3'), mu=1500)
# write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different
# from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, mu=1500)
# write three more RScripts in your MechaCarChallenge.RScript using the t.test() function and its subset() argument
# to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch
lot1 <- subset(sus_coil, Manufacturing_Lot == "Lot1")
t.test(lot1$PSI, mu=1500)
lot2 <- subset(sus_coil, Manufacturing_Lot == "Lot2")
t.test(lot2$PSI, mu=1500)
lot3 <- subset(sus_coil, Manufacturing_Lot == "Lot3")
t.test(lot3$PSI, mu=1500)
# Deliverable 1 -----------------------------------------------------------
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
mecha_mpg <- read.csv(file='resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg))
# Deliverable 2 -----------------------------------------------------------
# Import and read in the Suspension_Coil.csv file as a table.
sus_coil <- read.csv(file='resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the summarize() function to get the:
# mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- sus_coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each
# manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Deliverable 3 -----------------------------------------------------------
# write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different
# from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, mu=1500)
# write three more RScripts in your MechaCarChallenge.RScript using the t.test() function and its subset() argument
# to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch
lot1 <- subset(sus_coil, Manufacturing_Lot == "Lot1")
t.test(lot1$PSI, mu=1500)
lot2 <- subset(sus_coil, Manufacturing_Lot == "Lot2")
t.test(lot2$PSI, mu=1500)
lot3 <- subset(sus_coil, Manufacturing_Lot == "Lot3")
t.test(lot3$PSI, mu=1500)
# Deliverable 1 -----------------------------------------------------------
# Use the library() function to load the dplyr package
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
mecha_mpg <- read.csv(file='resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg))
# Deliverable 2 -----------------------------------------------------------
# Import and read in the Suspension_Coil.csv file as a table.
sus_coil <- read.csv(file='resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
# Write an RScript that creates a total_summary dataframe using the summarize() function to get the:
# mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- sus_coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each
# manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- sus_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
# Deliverable 3 -----------------------------------------------------------
# write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different
# from the population mean of 1,500 pounds per square inch
t.test(sus_coil$PSI, mu=1500)
# write three more RScripts in your MechaCarChallenge.RScript using the t.test() function and its subset() argument
# to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch
lot1 <- subset(sus_coil, Manufacturing_Lot == "Lot1")
t.test(lot1$PSI, mu=1500)
lot2 <- subset(sus_coil, Manufacturing_Lot == "Lot2")
t.test(lot2$PSI, mu=1500)
lot3 <- subset(sus_coil, Manufacturing_Lot == "Lot3")
t.test(lot3$PSI, mu=1500)
